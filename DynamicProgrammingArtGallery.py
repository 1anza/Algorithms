# -*- coding: utf-8 -*-
"""PS3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_yicLpls3-oGOwoOAXwgGjHzUbfo2MWx
"""

# input gallery elements
nk = list(map(int, input().split())) 

# num of rows
n = nk[0]

# num of closed rooms
k = nk[1]

# gallery array, 3D array for memoization
gallery = [[0 for x in range(2)] for y in range(n+1)]
threeD = [[[0 for col in range(500)]for row in range(500)] for x in range(3)]

# input gallery values and find total value of gallery
for i in range(0, n+1):
    val = input().split()
    gallery[i][0] = int(val[0])
    gallery[i][1] = int(val[1])

# function to find the max value through the gallery
def maxValue(row, direction, blocked):
    global n
    global k
    global gallery
    global threeD

    if row >= n and blocked == 0:
        return 0

    if row >= n and blocked != 0:
        return -100000000

    if threeD[direction][blocked][row] != 0:
        return threeD[direction][blocked][row]
    
    value = 0

    if blocked == n - row:

        if direction == 0:
            value = max(value, gallery[row][0] + maxValue(row + 1, 1, blocked -1), gallery[row][1] + maxValue(row + 1, 2, blocked-1))

        if direction == 1:
            value = max(value, gallery[row][0] + maxValue(row + 1, 1, blocked-1))

        if direction == 2:
            value = max(value, gallery[row][1] + maxValue(row + 1, 2, blocked-1))

    if blocked > 0 and blocked < n - row:

        if direction == 0:
            value = max(value, gallery[row][0] + maxValue(row + 1, 1, blocked-1), gallery[row][1] + maxValue(row + 1, 2, blocked-1), gallery[row][0] + gallery[row][1] + maxValue(row + 1, 0, blocked))

        if direction == 1:
            value = max(value, gallery[row][0] + maxValue(row + 1, 1, blocked-1), gallery[row][0] + gallery[row][1] + maxValue(row + 1, 0, blocked))

        if direction == 2:
            value = max(value, gallery[row][1] + maxValue(row + 1, 2, blocked-1), gallery[row][0] + gallery[row][1] + maxValue(row + 1, 0, blocked))

    if blocked == 0:
        value = max(value, gallery[row][0] + gallery[row][1] + maxValue(row + 1, 0, blocked))

    threeD[direction][blocked][row] = value
    return int(threeD[direction][blocked][row])

# print largest value of gallery
print(maxValue(0, 0, k))