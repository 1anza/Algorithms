# -*- coding: utf-8 -*-
"""PS6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10nkYq5-VN04YK6s_V8RKpAg3dVrvnkuu
"""

from collections import deque, OrderedDict

#inputs
nm = list(map(int,input().split()))
n = nm[0]
m = nm[1]

amt = list(map(int,input().split()))
val = [[0 for x in range(3)] for y in range(m)]


for i in range(0,m):
  inp = list(map(int,input().split()))
  for j in range(0, 3):
    val[i][j] = inp[j]

def recipe_DAG(vertex, edges):

    topoSort = []
    inDeg = {i: 0 for i in vertex}
    graph = {i: [] for i in vertex}
    childGraph = {i: [] for i in vertex}

    #update the inDeg of vertex and graph
    for edge in edges:
        parent, child, cost = edge[0], edge[1], edge[2]
        graph[parent].append(child)
        childGraph[child].append((parent, cost))
        inDeg[child] += 1

    #store sorted vertex
    queue = deque()
    for source, degree in inDeg.items():
        if degree == 0:
            queue.append(source)

    while queue:
        source = queue.popleft()
        topoSort.append(source)
        for child in graph[source]:
            inDeg[child] -= 1
            if inDeg[child] == 0:
                queue.append(child)

    sortedChildGraph = OrderedDict(reversed([(x, childGraph[x]) for x in topoSort]))

    # Iterate over a dictionary with list values using nested for loop
    for key, values in sortedChildGraph.items():
        for v,w in values:
            amt[v] += w * amt[key]


    print(*amt)


vertex = [0 for x in range(n)]
for i in range (0,n):
  vertex[i] = i


recipe_DAG(vertex, val)